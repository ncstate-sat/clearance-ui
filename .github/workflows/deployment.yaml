name: Run Tests & Build Image

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  REGISTRY_URL: satregistry.ehps.ncsu.edu
  PROJECT_NAME: clearance-tool
  REPO_NAME: clearance-ui
  SLACK_UPDATES: true
  SLACK_CHANNEL_ID: C053DS40S22
  E2E_REFRESH_TOKEN: ${{ secrets.E2E_REFRESH_TOKEN_ADMIN }}
  E2E_LIAISON_REFRESH_TOKEN: ${{ secrets.E2E_REFRESH_TOKEN_LIAISON }}
  VITE_AUTH_SERVICE_URL: 'https://auth.services.test.ehps.ncsu.edu'
  VITE_CLEARANCE_SERVICE_URL: 'https://clearance.services.test.ehps.ncsu.edu'

jobs:
  run-tests:
    name: Run Tests
    runs-on: sat-hosted
    steps:
      - name: Get Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Get SAT Actions
        uses: actions/checkout@v3
        with:
          repository: SAT/sat-actions
          path: sat-actions

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        id: test
        run: |
          npx playwright install
          npm run e2e

      - name: Send Failure Message on Slack if Tests Fail
        if: ${{ failure() }}
        uses: ./sat-actions/slack-updates
        with:
          channel-id: ${{ github.event.inputs.slack-channel-id || env.SLACK_CHANNEL_ID }}
          message: 'The tests for `${{ env.REPO_NAME }}` have failed.'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_UPDATES: ${{ github.event.inputs.slack-updates || env.SLACK_UPDATES }}

      - name: End the Job if the Tests Fail
        if: ${{ failure() }}
        run: exit 1

      - name: Send Success Message on Slack
        uses: ./sat-actions/slack-updates
        with:
          channel-id: ${{ github.event.inputs.slack-channel-id || env.SLACK_CHANNEL_ID }}
          message: 'The tests for `${{ env.REPO_NAME }}` have passed.'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_UPDATES: ${{ github.event.inputs.slack-updates || env.SLACK_UPDATES }}

  build-image:
    name: Build Image
    needs: run-tests
    if: ${{ github.ref_name == 'develop' || github.ref_name == 'main' }}
    runs-on: sat-hosted
    outputs:
      image_tag: ${{ steps.image-tag-string.outputs.tag }}
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Get SAT Actions
        uses: actions/checkout@v3
        with:
          repository: SAT/sat-actions
          path: sat-actions

      - name: Docker Login
        uses: ./sat-actions/docker-login
        with:
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY_URL }}/${{env.PROJECT_NAME }}/${{ env.REPO_NAME }}
          tags: |
            type=raw,value={{branch}}.{{sha}}.{{date 'YYYY-MM-DD.HHmm'}}Z

      - name: Update Docker Image
        id: image-update
        uses: ./sat-actions/update-image
        with:
          image-tag: ${{ steps.meta.outputs.tags }}
          dockerfile: ./Dockerfile

      - name: Send Failure Message on Slack if Image Upload Fails
        if: ${{ failure() && steps.image-update.conclusion == 'failure' }}
        uses: ./sat-actions/slack-updates
        with:
          channel-id: ${{ github.event.inputs.slack-channel-id || env.SLACK_CHANNEL_ID }}
          message: 'The tests for `${{ env.REPO_NAME }}` have passed, but the image failed to upload to Harbor.'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_UPDATES: ${{ github.event.inputs.slack-updates || env.SLACK_UPDATES }}

      - name: End the Job if the Image Upload Fail
        if: ${{ failure() && steps.image-update.conclusion == 'failure' }}
        run: exit 1

      - name: Modify Tag String
        id: image-tag-string
        if: ${{ !failure() }}
        env:
          TAG: ${{ steps.meta.outputs.tags }}
        run: |
          echo "tag=${TAG##*:}" >> $GITHUB_OUTPUT

      - name: Send Success Message on Slack
        uses: ./sat-actions/slack-updates
        with:
          channel-id: ${{ github.event.inputs.slack-channel-id || env.SLACK_CHANNEL_ID }}
          message: 'A new image for `${{ env.REPO_NAME }}` has been uploaded to Harbor.```${{ steps.image-tag-string.outputs.tag }}```'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_UPDATES: ${{ github.event.inputs.slack-updates || env.SLACK_UPDATES }}

  deploy-image-to-test:
    name: Deploying Image
    needs: [run-tests, build-image]
    if: ${{ github.ref_name == 'develop' }}
    runs-on: sat-hosted
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Get SAT Actions
        uses: actions/checkout@v3
        with:
          repository: SAT/sat-actions
          path: sat-actions
      - uses: azure/setup-kubectl@v3
      - name: Store 'test' Kube config GITHUB_ENV File
        run: |
          echo "KUBECONFIG<<EOF" >> $GITHUB_ENV
          cat ~/.kube/config.test >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ env.KUBECONFIG }}
      - name: Display Tag
        run: echo ${{ needs.build-image.outputs.image_tag }}
      - uses: azure/k8s-deploy@v4.5
        with:
          namespace: clearance
          action: deploy
          strategy: basic
          images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}/${{ env.REPO_NAME }}:${{ needs.build-image.outputs.image_tag }}
          manifests: |
            deploy/test
      - name: Send Success Message
        uses: ./sat-actions/slack-updates
        with:
          channel-id: ${{ github.event.inputs.slack-channel-id || env.SLACK_CHANNEL_ID }}
          message: "Image: ```${{ needs.build-image.outputs.image_tag }}``` Deployed to Test. :fireworks:"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_UPDATES: ${{ github.event.inputs.slack-updates || env.SLACK_UPDATES }}

  deploy-image-to-production:
      name: Deploying Image
      needs: [run-tests, build-image]
      if: ${{ github.ref_name == 'main' }}
      runs-on: sat-hosted
      steps:
        - name: Get Code
          uses: actions/checkout@v3
        - name: Get SAT Actions
          uses: actions/checkout@v3
          with:
            repository: SAT/sat-actions
            path: sat-actions
        - uses: azure/setup-kubectl@v3
        - name: Store 'test' Kube config GITHUB_ENV File
          run: |
            echo "KUBECONFIG<<EOF" >> $GITHUB_ENV
            cat ~/.kube/config.prod >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
        - uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ env.KUBECONFIG }}
        - name: Display Tag
          run: echo ${{ needs.build-image.outputs.image_tag }}
        - uses: azure/k8s-deploy@v4.5
          with:
            namespace: clearance
            action: deploy
            strategy: basic
            images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}/${{ env.REPO_NAME }}:${{ needs.build-image.outputs.image_tag }}
            manifests: |
              deploy/prod
        - name: Send Success Message
          uses: ./sat-actions/slack-updates
          with:
            channel-id: ${{ github.event.inputs.slack-channel-id || env.SLACK_CHANNEL_ID }}
            message: "Image: ```${{ needs.build-image.outputs.image_tag }}``` Deployed to Production. :fireworks:"
          env:
            SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
            SLACK_UPDATES: ${{ github.event.inputs.slack-updates || env.SLACK_UPDATES }}